searchState.loadedDescShard("narangcia_cryptic", 0, "Cryptic Authentication Crate\nError type for authentication operations.\nMain authentication service.\nUser type.\nHigh-level authentication service API.\nCore primitives: users, credentials, hashing, tokens, etc.\nError types for authentication operations.\nThe main structure of the authentication service. It …\nCreates a default <code>AuthService</code> instance using default …\nReturns the argument unchanged.\nGenerates a new token pair (access and refresh tokens) for …\nValidates a token and retrieves the associated user from …\nValidates a token and extracts the user ID (subject) from …\nCalls <code>U::from(self)</code>.\nChecks if a token is expired by attempting to validate it.\nAttempts to log in a user by verifying their credentials.\nComplete login flow that returns both the user and a new …\nConstructs a new <code>AuthService</code> with the provided …\nThe password manager responsible for password hashing and …\nThe user repository for persistent user management (e.g., …\nRefreshes an access token using a valid refresh token.\nRegisters a new user in the system.\nThe token manager responsible for generating and …\nValidates an access token and returns the associated …\nShared configuration and variables for the authentication …\nCredentials Module\nPassword Management Module\nSecurity policy module.\nToken management module.\nUser data structures and persistence traits.\nRepresents a user’s credentials, including identifiers …\nReturns the argument unchanged.\nCreates credentials by hashing a plaintext password using …\nUnique identifier for the user (preferably email or …\nCalls <code>U::from(self)</code>.\nCreates a new <code>Credentials</code> instance from an already hashed …\nHashed password\nThis module defines the <code>PlainPassword</code> structure for secure …\nUnique identifier for the user (preferably UUID)\nVerifies a plaintext password against the stored password …\nA temporary container for plaintext passwords.\nReturns the password as a string slice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>PlainPassword</code> from a <code>String</code>.\nHashing utilities for the <code>cryptic</code> authentication library.\nSalt generation utilities. Utilities for generating …\nA wrapper for the Argon2 password hashing algorithm.\nReturns the argument unchanged.\nHashes arbitrary data (such as a password) using Argon2 …\nCalls <code>U::from(self)</code>.\nCreates a new <code>Argon2Hasher</code> with default parameters.\nVerifies arbitrary data (such as a password) against a …\nGenerates a cryptographically secure random salt for …\nRe-export of the Argon2-based password manager …\nRe-export of the main password management trait.\nArgon2 password manager implementation.\nPassword management trait for secure password hashing and …\nA password manager that uses the Argon2 algorithm for …\nReturns the argument unchanged.\nHashes a password using the Argon2 algorithm.\nCalls <code>U::from(self)</code>.\nVerifies a plaintext password against a hashed password …\nTrait for secure password management, including hashing …\nHashes a plaintext password using a secure algorithm.\nVerifies a plaintext password against a hashed password.\nRepresents the requirements for a strong password.\nReturns a <code>PasswordPolicy</code> with strong default requirements:\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidates whether a password meets the requirements …\nRepresents a pair of authentication tokens.\nTrait for token service operations.\nSubmodule for default claims for JWTs.\nReturns the argument unchanged.\nGenerates a new token pair for a given user.\nCalls <code>U::from(self)</code>.\nSubmodule for JWT implementation and utilities.\nRefreshes an access token using a refresh token.\nValidates an access token and extracts its claims.\nClaims for access tokens.\nTrait for all types of claims used in authentication …\nClaims for refresh tokens.\nExpiration timestamp (UNIX timestamp, seconds).\nExpiration timestamp (UNIX timestamp, seconds).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the expiration timestamp (as a UNIX timestamp in …\nReturns the expiration timestamp of the access token.\nReturns the expiration timestamp of the refresh token.\nReturns the subject of the claim (usually the user …\nReturns the subject (user ID) of the access token.\nReturns the subject (user ID) of the refresh token.\nIssued at timestamp (UNIX timestamp, seconds).\nIssued at timestamp (UNIX timestamp, seconds).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSubject (user ID) to whom the token was issued.\nSubject (user ID) to whom the token was issued.\nType of the token (should be “access”).\nType of the token (should be “refresh”).\nService for generating, validating, and refreshing JWT …\nReturns the argument unchanged.\nGenerates a new access and refresh token pair for the …\nCalls <code>U::from(self)</code>.\nCreates a new <code>JwtTokenService</code> with the given secret and …\nValidates a refresh token and generates a new token pair …\nValidates an access token and returns its claims.\nRepresents a user in the authentication system.\nUser credentials, including hashed password and identifier.\nReturns the argument unchanged.\nUnique identifier for the user (preferably a UUID).\nCalls <code>U::from(self)</code>.\nCreates a new user with already hashed credentials.\nPersistence traits and types for user storage and …\nCreates a user from a plaintext password, hashing it using …\nRe-export of the in-memory user repository for convenient …\nRe-export of the persistent user storage type for …\nRe-export of the core user repository trait for convenient …\nIn-memory user repository implementation.\nPersistent user storage implementation.\nCore traits for user repository abstraction.\nThread-safe, in-memory implementation of the <code>UserRepository</code>…\nAdds a new user to the repository.\nDeletes a user from the repository by their ID.\nReturns the argument unchanged.\nRetrieves a user by their unique ID.\nRetrieves a user by their identifier (e.g., username or …\nCalls <code>U::from(self)</code>.\nCreates a new, empty in-memory user repository.\nUpdates an existing user in the repository.\nIn-memory user repository. Fast, non-persistent, and ideal …\n<code>PersistentUsers</code> is an enum that abstracts over different …\nAdds a new user to the repository.\nDeletes a user from the repository by their unique ID.\nReturns the argument unchanged.\nRetrieves a user by their unique ID.\nRetrieves a user by a unique identifier (e.g., username or …\nCreates a new <code>PersistentUsers</code> instance backed by an …\nCalls <code>U::from(self)</code>.\nUpdates an existing user in the repository.\nAn abstraction for user persistence, allowing async CRUD …\nAdds a new user to the repository.\nDeletes a user from the repository by their id.\nRetrieves a user by their unique id.\nRetrieves a user by a unique identifier (e.g., username or …\nUpdates an existing user in the repository.\nConfiguration variables required for the authentication …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe duration (in seconds) for which a refresh token is …\nThe cryptographic secret key used for signing and …\nThe duration (in seconds) for which an access token is …\nAll possible errors that can occur within the …\nReturned when there is a configuration error in the …\nReturned when password hashing fails. Contains the …\nReturned when the provided credentials are invalid (e.g., …\nReturned when input data is invalid or malformed. Contains …\nReturned when a password does not meet policy requirements …\nReturned when a token is invalid (malformed, tampered, or …\nReturned when the password manager component is missing or …\nReturned when the persistent user manager component is …\nReturned when the token manager component is missing or …\nReturned when a feature is not yet implemented. Contains a …\nReturned when password verification fails. Contains the …\nReturned when a service required for authentication is …\nReturned when a token (such as a JWT) has expired and is …\nReturned when token generation fails. Contains a …\nReturned when token validation fails. Contains a …\nReturned when attempting to create a user that already …\nReturned when a user cannot be found in the data store.\nReturned when a verification process fails (e.g., email or …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")