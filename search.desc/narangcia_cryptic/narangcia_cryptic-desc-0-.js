searchState.loadedDescShard("narangcia_cryptic", 0, "Cryptic Authentication Crate\nError type for authentication operations.\nMain authentication service.\nUser type.\nAuthentication method enums for unified login and signup.\nAuthentication method enums for unified login and signup.\nHigh-level authentication service API.\nCore primitives: users, credentials, hashing, tokens, etc.\nError types for authentication operations.\nThe main authentication service, aggregating all …\nLogin using username/email and password credentials.\nRegister using credentials (username/email and password).\nRepresents different authentication methods for login …\nLogin using OAuth2 authorization code flow.\nRegister via OAuth2 (will create account if it doesn’t …\nRepresents different signup/registration methods.\nCreates a default <code>AuthService</code> instance using default …\nExchanges an OAuth2 authorization code for an access token.\nFetches user information from an OAuth2 provider using an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates an OAuth2 authorization URL for the specified …\nRetrieves all OAuth providers linked to a user.\nRetrieves the frontend redirect URI for the specified …\nGenerates a new token pair (access and refresh tokens) for …\nValidates a token and retrieves the associated user from …\nValidates a token and extracts the user ID (subject) from …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a token is expired by attempting to validate it.\nLinks an OAuth account to an existing user.\nAuthenticates a user using the specified login method.\nConstructs a new <code>AuthService</code> with the provided …\nThe password manager responsible for password hashing and …\nThe user repository for persistent user management (e.g., …\nRefreshes an access token using a valid refresh token.\nRefreshes an OAuth2 access token using a refresh token.\nRegisters a new user using the specified signup method.\nThe token manager responsible for generating and …\nUnlinks an OAuth account from a user.\nValidates an access token and returns the associated …\nShared configuration and variables for the authentication …\nThe authorization code received from the provider\nThe user identifier (username, email, etc.)\nThe user’s plain text password\nThe OAuth2 provider\nThe state parameter for CSRF protection\nThe authorization code received from the provider\nThe user identifier (username, email, etc.)\nThe user’s plain text password\nThe OAuth2 provider\nThe state parameter for CSRF protection\nCredentials Module\nOAuth2 core module for authentication and authorization.\nPassword Management Module\nSecurity policy module.\nToken management module.\nUser data structures and persistence traits.\nRepresents a user’s credentials, including identifiers …\nReturns the argument unchanged.\nCreates credentials by hashing a plaintext password using …\nUnique identifier for the user (preferably email or …\nCalls <code>U::from(self)</code>.\nCreates a new <code>Credentials</code> instance from an already hashed …\nHashed password\nThis module defines the <code>PlainPassword</code> structure for secure …\nUnique identifier for the user (preferably UUID)\nVerifies a plaintext password against the stored password …\nA temporary container for plaintext passwords.\nReturns the password as a string slice.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new <code>PlainPassword</code> from a <code>String</code>.\nHashing utilities for the <code>cryptic</code> authentication library.\nSalt generation utilities. Utilities for generating …\nA wrapper for the Argon2 password hashing algorithm.\nReturns the argument unchanged.\nHashes arbitrary data (such as a password) using Argon2 …\nCalls <code>U::from(self)</code>.\nCreates a new <code>Argon2Hasher</code> with default parameters.\nVerifies arbitrary data (such as a password) against a …\nGenerates a cryptographically secure random salt for …\nTrait for handling OAuth2 authentication and authorization …\nExchanges an authorization code for an access token with …\nFetches user information from the OAuth2 provider using …\nGenerates an authorization URL for the specified OAuth2 …\nGets the redirect_frontend_uri for the given OAuth2 …\nOAuth2 manager module: contains logic for managing …\nRefreshes an access token using a refresh token.\nOAuth2 store module: defines types and storage for tokens, …\nManages OAuth2 authentication flows for multiple providers.\nExchanges an authorization code for an access token for …\nFetches user information from the provider’s user info …\nReturns the argument unchanged.\nGenerates the OAuth2 authorization URL for the specified …\nReturns a configured OAuth2 client for the given provider.\nGets the frontend redirect URI for the given provider.\nCalls <code>U::from(self)</code>.\nSets the <code>user_id</code> field in <code>OAuth2UserInfo</code> to link it to a …\nCreates a new <code>OAuth2Manager</code> with the provided provider …\nParses user information from the provider’s user info …\nRefreshes the access token using the refresh token for the …\nDiscord OAuth2 provider.\nGitHub OAuth2 provider.\nGoogle OAuth2 provider.\nMicrosoft OAuth2 provider.\nConfiguration for OAuth2 authentication with a provider.\nSupported OAuth2 providers for authentication.\nRepresents an OAuth2 session, including state, provider, …\nRepresents an OAuth2 token, including access and refresh …\nRepresents user information returned by an OAuth2 provider.\nThe access token string used for authenticated requests.\nAdditional scopes to request during authentication.\nThe name of the application using OAuth2.\nReturns the authorization URL for the given provider.\nThe user’s avatar URL, if available.\nThe OAuth2 client ID issued by the provider.\nThe OAuth2 client secret issued by the provider.\nThe time the token was created.\nThe time the session was created.\nReturns the default OAuth2 scopes required for the …\nReturns the display name of the provider as a …\nThe user’s email address, if available.\nThe expiration time of the access token, if available.\nThe time the session expires.\nChecks if the token will expire within the given threshold …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the token is expired.\nThe user’s locale, if available.\nThe user’s display name, if available.\nThe PKCE verifier string, if used for enhanced security.\nThe OAuth2 provider that issued the token.\nThe OAuth2 provider that authenticated the user.\nThe OAuth2 provider for this session.\nThe unique user ID from the provider.\nThe raw user info data as returned by the provider, if …\nThe redirect URI for OAuth2 callbacks. This is where the …\nThe redirect URI for the user to go back to the frontend …\nThe optional refresh token string, used to obtain new …\nThe scope of the token, if provided by the provider.\nThe session state string (used for CSRF protection).\nThe type of token (usually “Bearer”).\nReturns the token endpoint URL for the given provider.\nThe time the user info was last updated.\nThe internal user ID assigned by the application.\nReturns the user info endpoint URL for the given provider.\nWhether the user’s email is verified, if available.\nRe-export of the Argon2-based password manager …\nRe-export of the main password management trait.\nArgon2 password manager implementation.\nPassword management trait for secure password hashing and …\nA password manager that uses the Argon2 algorithm for …\nReturns the argument unchanged.\nHashes a password using the Argon2 algorithm.\nCalls <code>U::from(self)</code>.\nVerifies a plaintext password against a hashed password …\nTrait for secure password management, including hashing …\nHashes a plaintext password using a secure algorithm.\nVerifies a plaintext password against a hashed password.\nRepresents the requirements for a strong password.\nReturns a <code>PasswordPolicy</code> with strong default requirements:\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidates whether a password meets the requirements …\nRepresents a pair of authentication tokens.\nTrait for token service operations.\nSubmodule for default claims for JWTs.\nReturns the argument unchanged.\nGenerates a new token pair for a given user.\nCalls <code>U::from(self)</code>.\nSubmodule for JWT implementation and utilities.\nRefreshes an access token using a refresh token.\nValidates an access token and extracts its claims.\nClaims for access tokens.\nTrait for all types of claims used in authentication …\nClaims for refresh tokens.\nExpiration timestamp (UNIX timestamp, seconds).\nExpiration timestamp (UNIX timestamp, seconds).\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the expiration timestamp (as a UNIX timestamp in …\nReturns the expiration timestamp of the access token.\nReturns the expiration timestamp of the refresh token.\nReturns the subject of the claim (usually the user …\nReturns the subject (user ID) of the access token.\nReturns the subject (user ID) of the refresh token.\nIssued at timestamp (UNIX timestamp, seconds).\nIssued at timestamp (UNIX timestamp, seconds).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSubject (user ID) to whom the token was issued.\nSubject (user ID) to whom the token was issued.\nType of the token (should be “access”).\nType of the token (should be “refresh”).\nService for generating, validating, and refreshing JWT …\nReturns the argument unchanged.\nGenerates a new access and refresh token pair for the …\nCalls <code>U::from(self)</code>.\nCreates a new <code>JwtTokenService</code> with the given secret and …\nValidates a refresh token and generates a new token pair …\nValidates an access token and returns its claims.\nRepresents a user in the authentication system.\nAccount creation timestamp\nUser credentials, including hashed password and identifier.\nReturns the argument unchanged.\nCreates a new user from OAuth account info only (no …\nGets the OAuth account info for a specific provider.\nChecks if an OAuth account is linked to this user.\nUnique identifier for the user (preferably a UUID).\nCalls <code>U::from(self)</code>.\nLinks an OAuth account to this user.\nCreates a new user with already hashed credentials.\nOAuth2 accounts linked to this user\nPersistence traits and types for user storage and …\nUnlinks an OAuth account from this user.\nLast updated timestamp\nCreates a user from a plaintext password, hashing it using …\nRe-export of the in-memory user repository for convenient …\nRe-export of the persistent user storage type for …\nRe-export of the core user repository trait for convenient …\nIn-memory user repository implementation.\nPersistent user storage implementation.\nCore traits for user repository abstraction.\nThread-safe, in-memory implementation of the <code>UserRepository</code>…\nAdds a new user to the repository.\nDeletes a user from the repository by their ID.\nReturns the argument unchanged.\nRetrieves a user by their unique ID.\nRetrieves a user by their identifier (e.g., username or …\nRetrieves a user by their OAuth provider and provider user …\nCalls <code>U::from(self)</code>.\nCreates a new, empty in-memory user repository.\nUpdates an existing user in the repository.\nIn-memory user repository. Fast, non-persistent, and ideal …\n<code>PersistentUsers</code> is an enum that abstracts over different …\nAdds a new user to the repository.\nDeletes a user from the repository by their unique ID.\nReturns the argument unchanged.\nRetrieves a user by their unique ID.\nRetrieves a user by a unique identifier (e.g., username or …\nRetrieves a user by their OAuth provider and provider user …\nCreates a new <code>PersistentUsers</code> instance backed by an …\nCalls <code>U::from(self)</code>.\nUpdates an existing user in the repository.\nAn abstraction for user persistence, allowing async CRUD …\nAdds a new user to the repository.\nDeletes a user from the repository by their id.\nRetrieves a user by their unique id.\nRetrieves a user by a unique identifier (e.g., username or …\nRetrieves a user by their OAuth provider and provider user …\nUpdates an existing user in the repository.\nConfiguration variables required for the authentication …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe duration (in seconds) for which a refresh token is …\nThe cryptographic secret key used for signing and …\nThe duration (in seconds) for which an access token is …\nAll possible errors that can occur within the …\nReturned when there is a configuration error in the …\nReturned when password hashing fails. Contains the …\nReturned when the provided credentials are invalid (e.g., …\nReturned when input data is invalid or malformed. Contains …\nReturned when a password does not meet policy requirements …\nReturned when a token is invalid (malformed, tampered, or …\nReturned when a user login operation fails. Contains a …\nReturned when the password manager component is missing or …\nReturned when the persistent user manager component is …\nReturned when the token manager component is missing or …\nReturned when a feature is not yet implemented. Contains a …\nReturned when an invalid response is received from the …\nReturned when a network error occurs during OAuth …\nReturned for other errors related to OAuth operations.\nReturned when the OAuth provider returns an error.\nReturned when the token exchange process fails during …\nReturned when fetching user info from the OAuth provider …\nReturned when password verification fails. Contains the …\nReturned when a service required for authentication is …\nReturned when a user signup operation fails. Contains a …\nReturned when a token (such as a JWT) has expired and is …\nReturned when token generation fails. Contains a …\nReturned when token validation fails. Contains a …\nReturned when attempting to create a user that already …\nReturned when a user cannot be found in the data store.\nReturned when a verification process fails (e.g., email or …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>ToString::to_string</code>, but without panic on OOM.")